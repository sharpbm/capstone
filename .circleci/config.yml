version: 2.1

commands:
  install_eks_dependencies:
    description: Install eks dependencies
    steps:
      - run:
          name: Install eks dependencies
          command: |
            yum install -y tar gzip        
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            CLUSTER_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-udacity-capstone-cluster::ARN'].Value" --output text)
            echo "CLUSTER_ARN: " ${CLUSTER_ARN}
            aws eks update-kubeconfig --name udacity-capstone
            kubectl config use-context ${CLUSTER_ARN}

jobs:

  run-lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint            

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          
  build-upload-docker:
    docker:
      - image: circleci/golang:1.16

    steps:
      - checkout
      
      - setup_remote_docker:
          version: 20.10.14
          
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
            
      - run:
          name: Upload Docker to Dockerhub
          command: |
            docker build -t $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest .
            docker images
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:latest
            
  create-eks-cluster:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install tar utility
            command: |
              yum install -y tar gzip        
        - run:
            name: Install eksctl
            command: |
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              mv /tmp/eksctl /usr/local/bin
              eksctl version
        - run:
            name: Create eks cluster 
            command: |
              CLUSTER_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-udacity-capstone-cluster::ARN'].Value" --output text)
              echo "CLUSTER_ARN: " ${CLUSTER_ARN}
              if [[ "${CLUSTER_ARN}" = "" ]] 
              then 

                eksctl create cluster --name udacity-capstone \
                --nodegroup-name workers \
                --node-type t2.medium \
                --nodes 2 \
                --nodes-min 1 \
                --nodes-max 2

                sleep 1m  
                
              fi
              
  deploy-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_eks_dependencies            
      - run: 
          name: deploy app & rollout
          command: |
            kubectl apply -f deployment.yml
            kubectl rollout restart deployments/capstone-app
            kubectl get deployments            
            kubectl get svc
            echo "lets wait for loadBalancer to be in active state..."
            sleep 3m
            until [ -n "$(kubectl get svc capstone-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" ]; do
                echo "Waiting for end point..."
                sleep 10
            done            
            echo 'End point ready'
            kubectl get svc
  
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install_eks_dependencies
      - run: 
          name: smoke test
          command: |
            loadbalancer=$(kubectl get svc capstone-app -o jsonpath="{.status.loadBalancer.ingress[*].hostname}")
            echo "loadbalancer: " ${loadbalancer}
            curl -I ${loadbalancer}:8080/captone-app


  create-developer-vm:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["9d:78:8d:b2:54:b0:a8:6b:52:3d:33:c0:6b:d1:95:20"]        
        - run:
            name: Install dependencies
            command: |
              apk add curl
              apk add --upgrade bash
              apk add --update ansible
              apk add openssh-client
              pip3 install awscli
        - run:
            name: Ensure back-end infrastructure exists
            command: |
            
              DEVELOPER_VM_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='developer-vm:ARN'].Value" --output text)
              echo "DEVELOPER_VM_ARN: " ${DEVELOPER_VM_ARN}
              if [[ "${DEVELOPER_VM_ARN}" = "" ]] 
              then 

                aws cloudformation deploy \
                --template-file .circleci/files/developer-vm.yml \
                --stack-name developer-vm \
                --parameter-overrides ID=developer-vm \
                --tags project=developer-vm
                
                aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=developer-vm" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
                cat ~/project/.circleci/ansible/inventory.txt
                
                export ANSIBLE_HOST_KEY_CHECKING=False
                ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-developer-vm.yml

              fi

workflows:
  default:
    jobs:
      # - run-lint
      # - build-upload-docker:
      #     requires:
      #       - run-lint
      - create-eks-cluster
          # requires:
          #   - build-upload-docker
      - create-developer-vm:
          requires:
            - create-eks-cluster
      - deploy-app:
          requires:
            - create-developer-vm
      - smoke-test:
          requires:
            - deploy-app
        
        